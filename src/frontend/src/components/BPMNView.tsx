import React, { useState, useEffect } from 'react';
import { BpmnVisualization, ShapeBpmnElementKind } from 'bpmn-visualization';
import tippy from 'tippy.js';

interface BpmnProps {
    process: string | null;
  }

const BPMNView: React.FC<BpmnProps> = ({process}) => {
  const [diagramData, setDiagramData] = useState<string | null>(null);
  const bpmnContainerElt = window.document.getElementById('bpmn-container');
  const processesData = process ? JSON.parse(process) : {};

  useEffect(() => {
      async function fetchData() {
          try {
              const response = await fetch(processesData.resource);
              const data = await response.text();
              setDiagramData(data);
          } catch (error) {
              console.error('Error fetching diagram:', error);
          }
      }

      fetchData();
  }, []);

  useEffect(() => {
      if (diagramData) {
          const bpmnVisualization = new BpmnVisualization({ container: bpmnContainerElt as HTMLElement, navigation: { enabled: false } });
          bpmnVisualization.load(diagramData);
          const bpmnElementsRegistry = bpmnVisualization.bpmnElementsRegistry;
          const elementsWithTimerPopup = bpmnElementsRegistry.getElementsByKinds(ShapeBpmnElementKind.EVENT_INTERMEDIATE_CATCH);
          const elementsWithPopup = bpmnElementsRegistry.getElementsByKinds(ShapeBpmnElementKind.TASK_SERVICE);
          addPopup(elementsWithPopup);
          console.log(elementsWithTimerPopup);
          addTimerPopup(elementsWithTimerPopup);
      }

      tippy.setDefaultProps({
          content: 'Loading...',
          allowHTML: true,
          onShow(instance) {
              instance.setContent(getBpmnElementInfoAsHtml(instance.reference));
          },
          onHidden(instance) {
              instance.setContent('Loading...');
          },

          // don't consider `data-tippy-*` attributes on the reference element as we fully manage tippy with javascript
          // and we cannot update the reference here as it is generated by bpmn-visualization
          ignoreAttributes: true,

          // https://atomiks.github.io/tippyjs/v6/all-props/#interactive
          interactive: true,
      });

      function addPopup(bpmnElements) {
          bpmnElements.forEach(bpmnElement => {
              const htmlElement = bpmnElement.htmlElement;

              htmlElement.addEventListener('click', () => {
                console.log('Element clicked:', bpmnElement);
            });

              const isEdge = !bpmnElement.bpmnSemantic.isShape;
              const offset = isEdge ? [0, -40] : undefined; // undefined offset for tippyjs default offset

              if (bpmnContainerElt) {
                tippy(htmlElement, {
                  // work perfectly on hover with or without 'diagram navigation' enable
                  appendTo: bpmnContainerElt.parentElement as Element,
                  arrow: false,
                  offset: offset as [number, number] | undefined,
                  placement: 'bottom',
                });
              }
          });
      }
      
      function addTimerPopup(bpmnElements) {
        bpmnElements.forEach(bpmnElement => {
            console.log(bpmnElement);
        });
    }

      function getBpmnElementInfoAsHtml(htmlElement) {
          const rect = htmlElement.querySelector('rect');
          const height = rect.getAttribute('height');
          const width = rect.getAttribute('width');

          return `<div class="bpmn-popover" style="background-color: blue; color: white; padding: 10px; border-radius: 5px; opacity: 0.85;">
      BPMN Info
      <hr>
      box heigth: ${height}
      <br>
      box width: ${width}
      </div>`;
      }

  }, [bpmnContainerElt, diagramData]);

  return (
    <div className='bpmnview'>
    <h2>{processesData.BpmnProcessId}</h2>
    <br/>

    <div id="bpmn-container"></div>
    <br/>

    <div className='process-container'>    
      <div className='process-item'>
        <span>Key</span>
        <div className="process-info">
          <span>{processesData.Key}</span>
        </div>
      </div>
      
      <div className='process-item'>
        <span>Version</span>
        <div className="process-info">
          <span>{processesData.version}</span>
        </div>
    </div>

    <div className='process-item'>
        <span>Instances</span>
        <div className="process-info">
          <span>{processesData.instances}</span>
        </div>
    </div>
  </div>
</div>  

  );
}

export default BPMNView;

/*default="Flow_1m61898">
      <bpmn:incoming>Flow_1td2sw1</bpmn:incoming>
      <bpmn:outgoing>Flow_02lkdv4</bpmn:outgoing>
      <bpmn:outgoing>Flow_1m61898</bpmn:outgoing>
    </bpmn:exclusiveGateway>
    <bpmn:intermediateCatchEvent id="Event_09vew4m" name="Wait 2 minutes">
      <bpmn:incoming>Flow_1m61898</bpmn:incoming>
      <bpmn:outgoing>Flow_116u7bb</bpmn:outgoing>
      <bpmn:timerEventDefinition id="TimerEventDefinition_1k2y3cd">
        <bpmn:timeDuration xsi:type="bpmn:tFormalExpression">PT120S</bpmn:timeDuration>
      </bpmn:timerEventDefinition> */