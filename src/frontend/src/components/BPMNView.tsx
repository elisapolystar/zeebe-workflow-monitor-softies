// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// The content of this file has been modified by Iiro Inkinen in 2023
// upon requirement of the software.

import React, { useState, useEffect } from 'react';
import { BpmnVisualization, ShapeBpmnElementKind } from 'bpmn-visualization';
import tippy from 'tippy.js';
import './component styles/BPMNView.css';

interface BpmnProps {
    process: string | null;
  }

const BPMNView: React.FC<BpmnProps> = ({process}) => {
  const [diagramData, setDiagramData] = useState<string | null>(null);
  const bpmnContainerElt = window.document.getElementById('bpmn-container');
  const processesData = process ? JSON.parse(process) : {};

  //change the base64 encoded string to xml
  const encodedBpmn = processesData.resource;
  const xml = encodedBpmn ? atob(encodedBpmn) : null;
  console.log(xml);

  useEffect(() => {
      setDiagramData(xml);
  }, [xml]);

  useEffect(() => {
      if (diagramData) {
          const bpmnVisualization = new BpmnVisualization({ container: bpmnContainerElt as HTMLElement, navigation: { enabled: false } });
          bpmnVisualization.load(diagramData);
          const bpmnElementsRegistry = bpmnVisualization.bpmnElementsRegistry;
          const elementsWithTimerPopup = bpmnElementsRegistry.getElementsByKinds(ShapeBpmnElementKind.EVENT_INTERMEDIATE_CATCH);
          const elementsWithPopup = bpmnElementsRegistry.getElementsByKinds(ShapeBpmnElementKind.TASK_SERVICE);
          addPopup(elementsWithPopup);
          console.log(elementsWithTimerPopup);
          addTimerPopup(elementsWithTimerPopup);
      }

      tippy.setDefaultProps({
          content: 'Loading...',
          allowHTML: true,
          onShow(instance) {
              instance.setContent(getBpmnElementInfoAsHtml(instance.reference));
          },
          onHidden(instance) {
              instance.setContent('Loading...');
          },

          // don't consider `data-tippy-*` attributes on the reference element as we fully manage tippy with javascript
          // and we cannot update the reference here as it is generated by bpmn-visualization
          ignoreAttributes: true,

          // https://atomiks.github.io/tippyjs/v6/all-props/#interactive
          interactive: true,
      });

      function addPopup(bpmnElements) {
          bpmnElements.forEach(bpmnElement => {
              const htmlElement = bpmnElement.htmlElement;

              htmlElement.addEventListener('click', () => {
                console.log('Element clicked:', bpmnElement);
            });

              const isEdge = !bpmnElement.bpmnSemantic.isShape;
              const offset = isEdge ? [0, -40] : undefined; // undefined offset for tippyjs default offset

              if (bpmnContainerElt) {
                tippy(htmlElement, {
                  // work perfectly on hover with or without 'diagram navigation' enable
                  appendTo: bpmnContainerElt.parentElement as Element,
                  arrow: false,
                  offset: offset as [number, number] | undefined,
                  placement: 'bottom',
                });
              }
          });
      }

      function addTimerPopup(bpmnElements) {
        bpmnElements.forEach(bpmnElement => {
            console.log(bpmnElement);
        });
    }

      function getBpmnElementInfoAsHtml(htmlElement) {
          const rect = htmlElement.querySelector('rect');
          const height = rect.getAttribute('height');
          const width = rect.getAttribute('width');

          return `<div class="bpmn-popover" style="background-color: blue; color: white; padding: 10px; border-radius: 5px; opacity: 0.85;">
      BPMN Info
      <hr>
      box heigth: ${height}
      <br>
      box width: ${width}
      </div>`;
      }

  }, [bpmnContainerElt, diagramData]);

  //Print all the process data
  return (
    <div className='bpmnview'>
    <h2>{processesData.bpmnProcessId}</h2>
    <br/>
    <div id="bpmn-container"></div>
    <br/>
    <div className='process-container'>
      <div className='process-item'>
        <span>Key</span>
        <div className="process-info">
          <span>{processesData.key}</span>
        </div>
      </div>

      <div className='process-item'>
        <span>Version</span>
        <div className="process-info">
          <span>{processesData.version}</span>
        </div>
    </div>

    <div className='process-item'>
        <span>Instances</span>
        <div className="process-info">
          <span>{processesData.instances}</span>
        </div>
    </div>
  </div>
</div>

  );
}

export default BPMNView;
