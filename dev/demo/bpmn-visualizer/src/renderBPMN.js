import React, { useState, useEffect } from 'react';
import { BpmnVisualization } from 'bpmn-visualization';
import diagram from './money-loan.bpmn';
import tippy from 'tippy.js';

function RenderBPMN(props) {
    const [diagramData, setDiagramData] = useState(null);
    const bpmnContainerElt = window.document.getElementById('bpmn-container');

    useEffect(() => {
        async function fetchData() {
            try {
                const response = await fetch(diagram);
                const data = await response.text();
                setDiagramData(data);
            } catch (error) {
                console.error('Error fetching diagram:', error);
            }
        }

        fetchData();
    }, []);

    useEffect(() => {
        if (diagramData) {
            const bpmnVisualization = new BpmnVisualization({ container: bpmnContainerElt, navigation: { enabled: false } });
            bpmnVisualization.load(diagramData);
            const bpmnElementsRegistry = bpmnVisualization.bpmnElementsRegistry;
            const elementsWithPopup = bpmnElementsRegistry.getElementsByIds([
                'send-rejection-letter',
            ]);
            addPopup(elementsWithPopup);
        }

        tippy.setDefaultProps({
            content: 'Loading...',
            allowHTML: true,
            onShow(instance) {
                instance.setContent(getBpmnElementInfoAsHtml(instance.reference));
            },
            onHidden(instance) {
                instance.setContent('Loading...');
            },

            // don't consider `data-tippy-*` attributes on the reference element as we fully manage tippy with javascript
            // and we cannot update the reference here as it is generated by bpmn-visualization
            ignoreAttributes: true,

            // https://atomiks.github.io/tippyjs/v6/all-props/#interactive
            interactive: true,
        });

        function addPopup(bpmnElements) {
            bpmnElements.forEach(bpmnElement => {
                const htmlElement = bpmnElement.htmlElement;
                const isEdge = !bpmnElement.bpmnSemantic.isShape;
                const offset = isEdge ? [0, -40] : undefined; // undefined offset for tippyjs default offset

                tippy(htmlElement, {
                    // work perfectly on hover with or without 'diagram navigation' enable
                    appendTo: bpmnContainerElt.parentElement,

                    arrow: false,
                    offset: offset,
                    placement: 'bottom',
                });
            });
        }

        function getBpmnElementInfoAsHtml(htmlElement) {
            const rect = htmlElement.querySelector('rect');
            const height = rect.getAttribute('height');
            const width = rect.getAttribute('width');

            return `<div class="bpmn-popover" style="background-color: blue; color: white; padding: 10px; border-radius: 5px; opacity: 0.85;">
        BPMN Info
        <hr>
        box heigth: ${height}
        <br>
        box width: ${width}
        </div>`;
        }

    }, [bpmnContainerElt, diagramData]);

    return (
        <div id="bpmn-container">
            <h2>BPMN demo</h2>
        </div>
    );
}

export default RenderBPMN;
